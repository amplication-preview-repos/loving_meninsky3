/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Steps as PrismaSteps,
  Task as PrismaTask,
} from "@prisma/client";

export class StepsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StepsCountArgs, "select">): Promise<number> {
    return this.prisma.steps.count(args);
  }

  async stepsItems(args: Prisma.StepsFindManyArgs): Promise<PrismaSteps[]> {
    return this.prisma.steps.findMany(args);
  }
  async steps(args: Prisma.StepsFindUniqueArgs): Promise<PrismaSteps | null> {
    return this.prisma.steps.findUnique(args);
  }
  async createSteps(args: Prisma.StepsCreateArgs): Promise<PrismaSteps> {
    return this.prisma.steps.create(args);
  }
  async updateSteps(args: Prisma.StepsUpdateArgs): Promise<PrismaSteps> {
    return this.prisma.steps.update(args);
  }
  async deleteSteps(args: Prisma.StepsDeleteArgs): Promise<PrismaSteps> {
    return this.prisma.steps.delete(args);
  }

  async getTask(parentId: string): Promise<PrismaTask | null> {
    return this.prisma.steps
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }
}
